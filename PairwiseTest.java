import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import java.util.ArrayList;

public class PairwiseTest {
    /*
    Test that valid input is indeed evaluated as valid
    */
    @Test
    public void testValidInput(){
        String[] valid = {"this", "is", "valid", "input"};
        assertTrue(Pairwise.validInput(valid));
    }

    /*
    Test that onvalid input (only one argument) is indeed evaluated as invalid
    */
    @Test
    public void testInvalidInput(){
        String[] invalid = {"NOTVALID"};
        assertFalse(Pairwise.validInput(invalid));
    }

    /*
    Test that no input is evaluated as invalid
    */
    @Test
    public void testNoInput(){
        assertFalse(Pairwise.validInput(null));
    }

    /*
    Test that the truncate function properly truncates strings to exactly 10 characters
    */
    @Test
    public void testTruncationLongWords(){
        String[] longWords = {
            "Thisisaprettylongword",
            "Thisoneisalsoprettylong",
            "wowthesearereallylong",
            "thisshoulddefinitelybetruncated"
        };

        String[] expected = {
            "Thisisapre",
            "Thisoneisa",
            "wowthesear",
            "thisshould"
        };
        assertArrayEquals(expected, Pairwise.truncate(longWords));
    }

    /*
    Test that the truncate function does not affect the length of strings shorter
    than 10 characters
    */
    @Test
    public void testTruncationShortWords(){
        String[] shortWords = {
            "short",
            "wow",
            "muchsmall",
            "suchshort"
        };

        String[] expected = {
            "short",
            "wow",
            "muchsmall",
            "suchshort"
        };
        assertArrayEquals(expected, Pairwise.truncate(shortWords));
    }

    /*
    Test that truncation works when the provided array contains a collection of strings
    that are shorter than 10 characters as well as exactly 10 characters.
    */
    @Test
    public void testTruncation(){
        String[] shortWords = {
            "short",
            "wow",
            "muchsmallerthanexpected",
            "suchshorterthanitshouldbe"
        };

        String[] expected = {
            "short",
            "wow",
            "muchsmalle",
            "suchshorte"
        };
        assertArrayEquals(expected, Pairwise.truncate(shortWords));
    }

    /*
    Test that truncation returns an array of size 0 if null is passed to it
    */
    @Test
    public void testTruncateNull(){
        String[] returned = Pairwise.truncate(null);
        assertEquals(0, returned.length);
    }

    /*
    Test that the truth table generation function returns null if invalid arguments (less than 0)
    are passed to it
    */
    @Test
    public void testTruthTableGeneratorNull(){
        assertNull(Pairwise.getTruthTable(0));
        assertNull(Pairwise.getTruthTable(-3));
    }

    /*
    Test that some arbitraru location in the truth table is correctly evaluated
    given the equation that should be used to generate it
    */
    @Test
    public void testTruthTableGenerator(){
        boolean[][] truth = Pairwise.getTruthTable(2);
        assertEquals(truth[2][1], (2 / (int)Math.pow(2, 1)) % 2 == 0);
    }

    /*
    Test that given some initial truth table, the covering array algorithm
    generated the results that I would expect, given the naive algorithm I implemented
    */
    @Test
    public void testCoveringArrayGeneration(){
        boolean[][] truthTable = {{false, false}, {false, true}, {true, false}, {true, true}};
        ArrayList<boolean[]> covering = Pairwise.getCoveringArray(truthTable);

        // I know this isn't the best practice for unit testing, but I wanted to make sure I covered
        // all my bases for testing the returned covering array
        for (int i = 0; i < 4; i++) {
            assertEquals(truthTable[i], covering.get(i));
        }
    }

    /*
    Test that passing an empty truth table to the covering array generator does
    not result in the function returning a null
    */
    @Test
    public void testCoveringArrayEmptyTruthTable(){
        boolean[][] empty = new boolean[1][12];
        ArrayList<boolean[]> covering = Pairwise.getCoveringArray(empty);
        assertNotNull(covering);
    }

    /*
    Test that the proper output is generated by the output generation function
    given a covering array with 4 rows (2-parameter truth table)
    */
    @Test
    public void testOutputString(){
        boolean[][] coverNative = {{false, false}, {false, true}, {true, false}, {true, true}};
        ArrayList<boolean[]> covering = new ArrayList<boolean[]>();
        covering.add(coverNative[0]);
        covering.add(coverNative[1]);
        covering.add(coverNative[2]);
        covering.add(coverNative[3]);

        String[] parameters = {"Test1", "Test2"};
        String expected = "Test1\tTest2\t\n0\t0\t\n0\t1\t\n1\t0\t\n1\t1\t\n";
        String observed = Pairwise.getFormattedCoveringArray(covering, parameters);

        assertEquals(expected, observed);
    }

    /*
    Test that a sole newline is returned when two empty arrays are passed to the format output
    string function
    */
    @Test
    public void testForSoleNewline(){
        ArrayList<boolean[]> emptyCovering = new ArrayList<boolean[]>();
        String[] emptyParameters = {};

        String returned = Pairwise.getFormattedCoveringArray(emptyCovering, emptyParameters);
        assertEquals("\n", returned);
    }
}
